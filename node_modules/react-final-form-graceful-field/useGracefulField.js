"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useGracefulField;

var _reactFinalForm = require("react-final-form");

var React = _interopRequireWildcard(require("react"));

function getRaw(meta) {
  var _meta$data;

  return meta === null || meta === void 0 ? void 0 : (_meta$data = meta.data) === null || _meta$data === void 0 ? void 0 : _meta$data['react-final-form-graceful-field'];
}

function useGracefulField(name, _ref) {
  var _form$getState$values;

  var afterSubmit = _ref.afterSubmit,
      allowNull = _ref.allowNull,
      beforeSubmit = _ref.beforeSubmit,
      children = _ref.children,
      component = _ref.component,
      data = _ref.data,
      defaultValue = _ref.defaultValue,
      _format = _ref.format,
      initialValue = _ref.initialValue,
      invalidValue = _ref.invalidValue,
      isEqual = _ref.isEqual,
      multiple = _ref.multiple,
      _parse = _ref.parse,
      subscription = _ref.subscription,
      type = _ref.type,
      _validate = _ref.validate,
      validateFields = _ref.validateFields,
      value = _ref.value;
  var form = (0, _reactFinalForm.useForm)('useField');
  var field = (0, _reactFinalForm.useField)(name, {
    afterSubmit: afterSubmit,
    allowNull: allowNull,
    beforeSubmit: beforeSubmit,
    children: children,
    component: component,
    data: data,
    defaultValue: defaultValue,
    format: function format(value, name) {
      return raw && (field.meta.active || raw.parseError) ? raw.rawValue : _format ? _format(value, name) : value;
    },
    formatOnBlur: false,
    initialValue: initialValue,
    isEqual: isEqual,
    multiple: multiple,
    parse: function parse(value, name) {
      var parseError;
      var parsedValue;

      try {
        return parsedValue = _parse ? _parse(value, name) : value;
      } catch (error) {
        parseError = error;
        return parsedValue = invalidValue;
      } finally {
        form.mutators.setFieldData(name, {
          'react-final-form-graceful-field': {
            rawValue: value,
            parsedValue: parsedValue,
            parseError: parseError
          }
        });
      }
    },
    subscription: subscription,
    type: type,
    validate: function validate(value, allValues, meta) {
      var raw = getRaw(meta);

      if (raw && raw.parseError && Object.is(raw.parsedValue, value)) {
        return raw.parseError.message;
      }

      if (_validate) return _validate(value, allValues, meta);
    },
    validateFields: validateFields,
    value: value
  });
  var raw = getRaw(field.meta);
  var curValue = (_form$getState$values = form.getState().values) === null || _form$getState$values === void 0 ? void 0 : _form$getState$values[name];
  React.useEffect(function () {
    if (!field.meta.active && raw && (!raw.parseError || !Object.is(raw.parsedValue, curValue))) {
      form.mutators.setFieldData(name, {
        'react-final-form-graceful-field': null
      });
    }
  }, [field.meta.active, raw, curValue]);
  return field;
}